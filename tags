!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
A	_1/sets.py	/^A, B = set([0, 1, 2]), set([0, 1])$/;"	v
Agenda	_0/python_walkthrough.md	/^# Agenda$/;"	c
Atom	_0/python_walkthrough.md	/^### Atom$/;"	S
B	_1/scalars.py	/^B = True$/;"	v
B	_1/sets.py	/^A, B = set([0, 1, 2]), set([0, 1])$/;"	v
Collaborative tools for coding	_0/python_walkthrough.md	/^# Collaborative tools for coding$/;"	c
Creating a new environment for SMM692	envSetup/README.md	/^# Creating a new environment for SMM692$/;"	c
Editing Python scripts – text editors	_0/python_walkthrough.md	/^## Editing Python scripts – text editors$/;"	s
F	_1/scalars.py	/^F = 0.5$/;"	v
Full-fledged IDEs	_0/python_walkthrough.md	/^## Full-fledged IDEs$/;"	s
Getting started with Python	_0/python_walkthrough.md	/^# Getting started with Python$/;"	c
How to get Python	_0/python_walkthrough.md	/^## How to get Python$/;"	s
I	_1/scalars.py	/^I = 2$/;"	v
Input-Output tasks – README	IO/README.md	/^# Input-Output tasks – README$/;"	c
Interacting with Python	_0/python_walkthrough.md	/^# Interacting with Python$/;"	c
Interactive IPython shell	_0/python_walkthrough.md	/^## Interactive IPython shell$/;"	s
Interactive Python shell	_0/python_walkthrough.md	/^## Interactive Python shell$/;"	s
Intro to Python, session #0 - README	_0/README.md	/^Intro to Python, session #0 - README$/;"	c
Introduction to Python - SMM692	README.md	/^# Introduction to Python - SMM692$/;"	c
Jupyter *	_0/python_walkthrough.md	/^## Jupyter *$/;"	s
Managing Python environment	_0/python_walkthrough.md	/^# Managing Python environment$/;"	c
Managing Python envs with Anaconda	_0/python_walkthrough.md	/^## Managing Python envs with Anaconda$/;"	s
OS-specific considerations	_0/python_walkthrough.md	/^## OS-specific considerations$/;"	s
Operating System tasks - README	OS/README.md	/^# Operating System tasks - README$/;"	c
PRICE	_1/strings.py	/^PRICE = 99.99$/;"	v
PyCharm	_0/python_walkthrough.md	/^### PyCharm$/;"	S
Python environment - README	envSetup/README.md	/^# Python environment - README$/;"	c
Python walk-through	_0/python_walkthrough.md	/^# Python walk-through$/;"	c
S	_1/strings.py	/^S = "Diplo is one of my favorite electronic music producers"$/;"	v
S	_1/strings.py	/^S = "Diplo is one of my favorite electronic music producers'$/;"	v
S	_1/strings.py	/^S = "Diplo\\'s latest single is hot"$/;"	v
S	_1/strings.py	/^S = 'Diplo is one of my favorite electronic music producers'$/;"	v
S0	_1/strings.py	/^S0 = 'abc'$/;"	v
S1	_1/strings.py	/^S1 = '123'$/;"	v
Spyder	_0/python_walkthrough.md	/^### Spyder$/;"	S
Tutorial # 1, intro to Python - README	_1/README.md	/^# Tutorial # 1, intro to Python - README$/;"	c
Tutorial # 2, control flow & iterators/loops – README	_2/README.md	/^# Tutorial # 2, control flow & iterators\/loops – README$/;"	c
Tutorial # 3, technical and scientific computation - README	_3/README.md	/^# Tutorial # 3, technical and scientific computation - README$/;"	c
Tutorial # 4, data management - README	_4/README.md	/^# Tutorial # 4, data management - README$/;"	c
UNIT	_1/strings.py	/^UNIT = '$'$/;"	v
Using Conda	envSetup/README.md	/^## Using Conda$/;"	s
Using pure 'Python'	envSetup/README.md	/^## Using pure 'Python'$/;"	s
Vim/Neovim	_0/python_walkthrough.md	/^### Vim\/Neovim$/;"	S
a	sample_dict.json	/^{"a": 1, "b": 4, "c": {"c_0": 3, "c_1": 2}}/;"	n
and_back	IO/read_write.py	/^    and_back = json.load(pipe)$/;"	v
and_back	IO/read_write.py	/^    and_back = pipe.read()         # we read the data using the pipe$/;"	v
and_back	IO/read_write.py	/^and_back = []$/;"	v
andback	IO/read_write.py	/^    andback = pickle.load(pipe)  # 'load' reads data$/;"	v
b	sample_dict.json	/^{"a": 1, "b": 4, "c": {"c_0": 3, "c_1": 2}}/;"	n
c	sample_dict.json	/^{"a": 1, "b": 4, "c": {"c_0": 3, "c_1": 2}}/;"	o
c_0	sample_dict.json	/^{"a": 1, "b": 4, "c": {"c_0": 3, "c_1": 2}}/;"	n	object:c
c_1	sample_dict.json	/^{"a": 1, "b": 4, "c": {"c_0": 3, "c_1": 2}}/;"	n	object:c
cities	_2/for_loop.py	/^cities = [' New York', 'San Fran', 'Boston ', ' Chicago ']$/;"	v
clean_str	_2/for_loop.py	/^    clean_str = city.strip()$/;"	v
companies	_2/for_loop.py	/^companies = ['Apple', 'Microsoft', 'Lenovo', 'Intel']$/;"	v
companies	_2/list_comprehensions.py	/^companies = ['Apple', 'Microsoft', 'Lenovo', 'Intel']$/;"	v
company_data	_2/control_flow.py	/^company_data = [['a', 'finacial services', 'UK'],$/;"	v
copied	_1/lists.py	/^copied = l.copy()$/;"	v
d	IO/read_write.py	/^d = {'a': 1, 'b': 4, 'c':{'c_0': 3, 'c_1': 2}}$/;"	v
d	_1/dictionaries.py	/^d = dict(data)$/;"	v
d	_1/dictionaries.py	/^d = dict(zip(ids, emails))$/;"	v
d	_1/dictionaries.py	/^d = {'company_0': {'location': 'UK',$/;"	v
d	_1/dictionaries.py	/^d = {'customer_0': 'xxxx@gmail.com', 'customer_1': 'yyyy@city.ac.uk'}$/;"	v
d	_2/for_loop.py	/^d = np.random.poisson(lam=6, size=100)$/;"	v
d	_2/list_comprehensions.py	/^d = np.random.poisson(lam=6, size=100)$/;"	v
d1	_1/dictionaries.py	/^d1 = {'customer_0': 'the_new_email@me.com'}$/;"	v
data	_1/dictionaries.py	/^data = ['customer_0', 'xxxx@gmail.com'], ['customer_1', 'yyyy@city.ac.uk']$/;"	v
emails	_1/dictionaries.py	/^emails = ['xxxx:gmail.com', 'yyyy@city.ac.uk']$/;"	v
fruits	_2/control_flow.py	/^fruits = ['apple', 'orange', 'pineapple']$/;"	v
i	_2/while_loop.py	/^i = 0$/;"	v
ids	_1/dictionaries.py	/^ids = ['customer_0', 'customer_1']$/;"	v
keys	_1/dictionaries.py	/^keys = d.keys()$/;"	v
l	IO/read_write.py	/^l = [0, 'a', 2.98]$/;"	v
l	_1/lists.py	/^l = ['a', 0, 0.995, 'hi there']$/;"	v
l	_1/lists.py	/^l = ['old_1', 'old_2']$/;"	v
l	_1/lists.py	/^l = [0, 0, 99, 1000]$/;"	v
l	_1/lists.py	/^l = [0, 1, 2, 3]$/;"	v
l	_1/lists.py	/^l = [3, 2, 1]$/;"	v
l	_1/sets.py	/^l = [0, 1, 9, 3, 3, 6, 6, 5]$/;"	v
l_0	_2/for_loop.py	/^l_0 = [1, 2, 3]$/;"	v
l_0	_2/list_comprehensions.py	/^l_0 = [1, 2, 3]$/;"	v
l_1	_2/for_loop.py	/^l_1 = ['a', 'b', 'c']$/;"	v
l_1	_2/list_comprehensions.py	/^l_1 = ['a', 'b', 'c']$/;"	v
merge	_2/control_flow.py	/^merge = []$/;"	v
mu	_2/for_loop.py	/^mu, std = np.mean(d), np.std(d)$/;"	v
mu	_2/list_comprehensions.py	/^mu, std = np.mean(d), np.std(d)$/;"	v
my_file	IO/read_write.py	/^my_file = 'list_as_pickle.pkl'$/;"	v
my_file	IO/read_write.py	/^my_file = 'sample_dict.json'$/;"	v
my_file	IO/read_write.py	/^my_file = 'sample_list.txt'$/;"	v
my_file	IO/read_write.py	/^my_file = 'short_sentence.txt'     # target file$/;"	v
my_files	OS/os_stuff.py	/^my_files = glob.glob(os.path.join('.', '*')) # '*' = we don't care the format$/;"	v
my_files	OS/os_stuff.py	/^my_files = glob.glob(os.path.join('_1\/', '*'))$/;"	v
my_md_files	OS/os_stuff.py	/^my_md_files = glob.glob(os.path.join('_1\/', '*.md'), recursive=True)$/;"	v
my_txt_files	OS/os_stuff.py	/^my_txt_files = glob.glob(os.path.join('.', '*.txt'))$/;"	v
np	_2/for_loop.py	/^import numpy as np$/;"	I
np	_2/list_comprehensions.py	/^import numpy as np$/;"	I
output	_2/for_loop.py	/^output = []$/;"	v
output	_2/list_comprehensions.py	/^output = [[i, j] for i in l_0 for j in l_1 if (i > 1) & (j == 'a')]$/;"	v
output	_2/list_comprehensions.py	/^output = [[i, j] for i in l_0 for j in l_1]$/;"	v
output	_2/list_comprehensions.py	/^output = [[i, j] for i, j in zip(l_0, l_1)]$/;"	v
pp	_1/dictionaries.py	/^from pprint import pprint as pp$/;"	x
profitability	_2/control_flow.py	/^profitability = [['a', 2018, 5.2],$/;"	v
s	IO/read_write.py	/^s = """This is a short sentence."""$/;"	v
s	_1/sets.py	/^s = ({'a', 'b', 'c'})$/;"	v
s	_1/sets.py	/^s = set(['a', 'b', 'c'])$/;"	v
std	_2/for_loop.py	/^mu, std = np.mean(d), np.std(d)$/;"	v
std	_2/list_comprehensions.py	/^mu, std = np.mean(d), np.std(d)$/;"	v
t	_1/tuples.py	/^t = ('a', 1, 5.64)$/;"	v
t	_1/tuples.py	/^t = (0, ['a', 'b'])$/;"	v
to_append	OS/os_stuff.py	/^        to_append = pipe.read()$/;"	v
to_append	_2/control_flow.py	/^                to_append = i + j[1:]$/;"	v
to_append	_2/control_flow.py	/^            to_append = i + j[1:]$/;"	v
to_append	_2/for_loop.py	/^        to_append = [i, j]$/;"	v
to_append	_2/for_loop.py	/^    to_append = (i - mu) \/ std$/;"	v
to_append	_2/for_loop.py	/^    to_append = [i, j]$/;"	v
txt_stuff	OS/os_stuff.py	/^txt_stuff = []$/;"	v
values	_1/dictionaries.py	/^values = d.values()$/;"	v
variable	_1/scalars.py	/^variable = I + F$/;"	v
z	_2/for_loop.py	/^z = []$/;"	v
z	_2/list_comprehensions.py	/^z = [(i - mu)\/std for i in d]$/;"	v
